import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useNavigate, useLocation } from 'react-router-dom';

export default function Accounts() {
  const navigate = useNavigate();
  const location = useLocation();
  const [hasToken, setHasToken] = useState<boolean>(false);
  const [tokenInput, setTokenInput] = useState<string>('');
  const [seller, setSeller] = useState<any | null>(null);
  const [mockEnabled, setMockEnabled] = useState<boolean>(false);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const loadAccountsData = async () => {
    try {
      const { data } = await axios.get('/api/v2/wb-api/token');
      setHasToken(Boolean((data as any)?.hasToken));
      const mock = await axios.get('/api/v2/wb-api/mock-mode');
      const isMockEnabled = Boolean((mock.data as any)?.mock);
      
      // Auto-disable mock mode when returning to Accounts page
      if (isMockEnabled) {
        try {
          await axios.post('/api/v2/wb-api/mock-mode?enabled=false');
          setMockEnabled(false);
        } catch (e) {
          console.error('Failed to disable mock mode', e);
          setMockEnabled(isMockEnabled);
        }
      } else {
        setMockEnabled(false);
      }
      
      // Only fetch seller info if token exists AND mock is disabled
      if ((data as any)?.hasToken && !isMockEnabled) {
        try {
          const s = await axios.get('/api/v2/wb-api/seller-info');
          // Only set seller if response is not mock data
          if (!s.data?.mock) {
            setSeller(s.data);
          } else {
            setSeller(null);
          }
        } catch (e) {
          console.error('Failed to fetch seller info', e);
          setSeller(null);
        }
      } else {
        setSeller(null);
      }
    } catch (e) {
      console.error('Failed to load accounts data', e);
    }
  };

  useEffect(() => {
    loadAccountsData();
  }, [location.pathname]); // Reload when returning to this page

  const saveToken = async () => {
    setLoading(true);
    setError(null);
    try {
      await axios.post(`/api/v2/wb-api/token?token=${encodeURIComponent(tokenInput)}`);
      await axios.post('/api/v2/wb-api/mock-mode?enabled=false');
      setHasToken(true);
      setMockEnabled(false);
      const s = await axios.get('/api/v2/wb-api/seller-info');
      setSeller(s.data);
      setTokenInput('');
    } catch (err: any) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ');
      console.error(err);
    }
    setLoading(false);
  };

  const enterRealCabinet = () => {
    navigate('/dashboard');
  };

  const enterMockCabinet = async () => {
    setLoading(true);
    setError(null);
    try {
      await axios.post('/api/v2/wb-api/mock-mode?enabled=true');
      setMockEnabled(true);
      setSeller(null); // Clear seller info when entering mock mode
      navigate('/demo');
    } catch (err) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å Mock —Ä–µ–∂–∏–º');
      console.error(err);
    }
    setLoading(false);
  };

  return (
    <div style={{ maxWidth: '1400px', margin: '0 auto' }}>
      <div className="mb-6">
        <h2 className="text-lg font-semibold mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã</h2>
        <p className="text-secondary text-sm">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π WB API —Ç–æ–∫–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</p>
      </div>
      
      {error && <div className="message message--error mb-4">{error}</div>}
      
      <div className="grid grid-cols-2" style={{ gap: 'var(--space-6)' }}>
        {/* Real Cabinet Card */}
        <div className="card">
          <div className="card__header">
            <div className="flex items-center gap-3">
              <div style={{ fontSize: '2rem' }}>üè¢</div>
              <div>
                <h3 className="card__title">–†–µ–∞–ª—å–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h3>
                <p className="card__description">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WB API</p>
              </div>
            </div>
          </div>
          
          <div className="card__content">
            {!hasToken ? (
              <div>
                <label className="text-sm font-medium text-secondary mb-2" style={{ display: 'block' }}>
                  WB API Token
                </label>
                <input 
                  type="password"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ WB" 
                  value={tokenInput} 
                  onChange={e => setTokenInput(e.target.value)}
                  className="mb-4"
                />
                <button className="btn btn--primary" onClick={saveToken} disabled={loading || !tokenInput}>
                  {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å'}
                </button>
              </div>
            ) : (
              <div>
                <div className="flex items-center gap-2 mb-4">
                  <span style={{ color: 'var(--success-solid)', fontSize: '1.5rem' }}>‚úì</span>
                  <span className="font-semibold text-success">–¢–æ–∫–µ–Ω –ø–æ–¥–∫–ª—é—á—ë–Ω</span>
                </div>
                <div className="mb-4 p-3" style={{ background: 'var(--bg-subtle)', borderRadius: 'var(--radius-md)' }}>
                  <div className="text-sm mb-1">
                    <span className="text-tertiary">–ü—Ä–æ–¥–∞–≤–µ—Ü:</span>{' '}
                    <span className="font-medium">{seller?.company || seller?.supplierName || seller?.name || '‚Äî'}</span>
                  </div>
                  {(seller?.inn || seller?.INN) && (
                    <div className="text-sm">
                      <span className="text-tertiary">–ò–ù–ù:</span>{' '}
                      <span className="font-medium">{seller.inn || seller.INN}</span>
                    </div>
                  )}
                </div>
                <button className="btn btn--primary" onClick={enterRealCabinet} disabled={loading}>
                  –í–æ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç ‚Üí
                </button>
              </div>
            )}
          </div>
        </div>

        {/* Mock Cabinet Card */}
        <div className="card">
          <div className="card__header">
            <div className="flex items-center gap-3">
              <div style={{ fontSize: '2rem' }}>üß™</div>
              <div>
                <h3 className="card__title">–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç</h3>
                <p className="card__description">–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –¥–µ–º–æ</p>
              </div>
            </div>
          </div>
          
          <div className="card__content">
            <p className="text-sm text-secondary mb-4">
              –†–∞–±–æ—Ç–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API. –ú–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 100‚Äì300 —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
            </p>
            <button className="btn btn--secondary" onClick={enterMockCabinet} disabled={loading}>
              {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–í–æ–π—Ç–∏ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç ‚Üí'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}


